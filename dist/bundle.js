/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/typingFrenzy.js":
/*!*****************************!*\
  !*** ./src/typingFrenzy.js ***!
  \*****************************/
/***/ (() => {

eval("window.addEventListener('load', async function() {\n  let text;\n  let author;\n  try{\n  const response = await fetch('http://localhost:1212/db/random')\n  if(!response.ok) {\n    throw new Error('Error getting data')\n  }\n  const data = await response.json();\n  text = data.passage;\n  author = data.author;\n\n  const passageText = document.getElementById('textPassage');\n \n  // Wrap each character in a span and append to passageText\n  text.split('').forEach((char) => {\n  const span = document.createElement('span');\n  span.textContent = char;\n  passageText.appendChild(span);\n  });\n  \n \n  \n\n  const authorDisplay = document.getElementById('authorBox');\n  authorDisplay.textContent = (`By: ${author}`)\n\n  const passageWords = passageText.textContent.split(' ');\n\n  const passageCharacters = passageText.textContent.split('')\n\n\n  const inputBox = document.getElementById('typingBox');\n\n  let passageIndex = 0;\n  let storedWords = [];\n  let timerStarted = false;\n  let time = passageCharacters.length * 0.7;// fixed rate depending on passage length \n  let numCorrectEntries =0;\n  let passageWordIndex = 0;\n  let typedEntries = 0;\n  let userHasMadeNoError = true; //state machine for when user input is right or wrong...\n  let firstWrongChar = 0;\n  let userCantBackspaceAnyFurtherBack = 0;\n  let canMoveForward = true\n  const timerDisplay = document.getElementById('timerDisplay');\n  const wpmDisplay = document.getElementById('wpmDisplay');\n\n\ninputBox.addEventListener('input', function handleKeyTyping(event) {\n  checkForMatch();\n});\n\n\n\ninputBox.addEventListener('keydown', function(event) {\n\n\n  if (event.key != 'Shift' && event.key != 'CapsLock' && userHasMadeNoError == true ) { //any other value besides these two will be considered an entry and starts the timer\n    if (event.key != \"Backspace\"){\n      typedEntries++\n    }\n\n    //console.log(`Total typed entries: ${typedEntries}`);\n    let secondsPassed = 0;\n    let wpmInterval;\n          \n    if (!timerStarted) {//will start timer count down once user starts inputting\n      timerStarted = true;\n      TimeInterval = setInterval(function() { //updates the time on the screen every second\n        if (time > 0) {\n          time--;\n          let  minutes = Math.floor(time/60);\n          let seconds = time - minutes * 60;\n          if(seconds<10){\n            timerDisplay.innerHTML = (`${minutes}:0${seconds.toFixed(0)}`); \n          }\n          else{\n            timerDisplay.innerHTML = (`${minutes}:${seconds.toFixed(0)}`); \n          }\n            \n  \n          \n          \n        } \n        else {\n          clearInterval(TimeInterval);  //Time will stop updating every seconds\n          clearInterval(wpmInterval);   //WPM will stop updating every 2.5 seconds\n          timerDisplay.innerHTML = (\"Time's up!\");\n          inputBox.disabled = true; // Disable the input box when the time is up\n        }\n         \n        }, 1000);\n      \n            \n      wpmInterval = setInterval(function() {\n        let secondsGiven = passageCharacters.length * 0.7;  \n        secondsPassed = secondsGiven - time;\n        let elapsedTimeInMinutes = secondsPassed / 60;\n        let wordsPerMinute = ((numCorrectEntries / 5)) / elapsedTimeInMinutes;// this is the WPM formula used by Speed Typing Online \n        if (wordsPerMinute >= 0){\n        wpmDisplay.innerHTML = (`WPM: ${wordsPerMinute.toFixed(0)}`);\n       }\n      }, 2500); // displays the wpm every 2.5 seconds on the page \n    }\n          \n\n        matchChar(event);\n        ensureSpacing(event);\n  }\n\n\n\n     \n    //handles the bulk of typing, tracks correct and incorrect characters, takes care of backspacing\n    function matchChar(event){\n      const inputText = inputBox.value // Simulate the input value after key press\n      const trackCorrectChars = document.querySelectorAll('span')\n      console.log(trackCorrectChars.length);\n\n      if ((event.key === \"Backspace\" || event.key === \" \") || !event.repeat) {//user can not hold down any key besides backspace or space\n\n\n      if(event.key === \"Backspace\" && passageIndex > userCantBackspaceAnyFurtherBack && inputBox.value !== '' ){\n        \n        handleBackspace(trackCorrectChars);\n          \n        }\n        else if (canMoveForward && event.key === passageCharacters[passageIndex] && event.repeat !== '' ) {\n          \n          passageIndex++;\n          numCorrectEntries++;\n          for (let i = 1; i <= passageIndex ; i++){\n            trackCorrectChars[i-1].style.color = \"orange\" \n            inputBox.style.backgroundColor = \"transparent\";\n\n          }      \n          firstWrongChar = 0;\n          canMoveForward = true\n        }\n        else if (event.key != \"Backspace\" && event.repeat !== '' ) {\n          \n          // Reset the style of the character at passageIndex\n          if(passageIndex < trackCorrectChars.length){\n          trackCorrectChars[passageIndex].style.color = \"black\"\n          trackCorrectChars[passageIndex].style.backgroundColor = \"pink\"\n          inputBox.style.backgroundColor = \"transparent\"\n          }\n\n          canMoveForward = false\n          passageIndex++\n        }   \n      }\n        \n  }\n\n\n    function ensureSpacing(event){ //makes sure that the user makes a space to go to next word if input matches current word user is on\n      if (event.key === ' ' && userHasMadeNoError) { // Check if the space bar is pressed\n        const inputWords = inputBox.value.trim().split(' '); // Get the input words and trim any extra spaces\n        if (inputWords[inputWords.length - 1] === passageWords[passageWordIndex]) { // clears the input box once the words match and user spaces to move to next word\n          storedWords.push(inputWords[inputWords.length - 1]);\n          inputBox.value = ''; // Clear the input box    \n          passageWordIndex++;\n          userCantBackspaceAnyFurtherBack = passageIndex ; //user won't be able to backspace any further back then after the space goes through so they will be just before the word starts\n        }\n    \n      } // Makes user have to input a space to move on to next word and reset the typing box\n    \n    }\n    \n  });\n\n\n\n  function checkForMatch(){\n    const trackCorrectChars = document.querySelectorAll('span')\n    // checks to see if the input is equal to the passage and if it is will disable the input box\n    if (storedWords.length === passageWords.length && storedWords.join(' ') === passageWords.join(' ')){\n      inputBox.style.backgroundColor = \"transparent\"\n      inputBox.disabled = true; \n      time = 0;\n    }  \n  }\n\n  function handleBackspace(trackCorrectChars){\n    canMoveForward = true\n\n    // Reset the style of the character at passageIndex\n    trackCorrectChars[passageIndex].style.color = \"black\"\n    trackCorrectChars[passageIndex].style.backgroundColor = \"transparent\"\n    inputBox.style.backgroundColor = \"transparent\"\n    passageIndex--\n\n\n\n    // Remove red highlights from the current position to the end\n    for (let i = passageIndex; i < trackCorrectChars.length; i++ ){\n      trackCorrectChars[i].style.color = \"black\"\n      trackCorrectChars[i].style.backgroundColor = \"transparent\"\n      inputBox.style.backgroundColor = \"transparent\"\n    }\n\n\n    \n  }\n\n\n}catch(error){\n  throw new Error(error)\n}\n});\n\n\n\n\n\n\n\n//# sourceURL=webpack://typing_frenzy/./src/typingFrenzy.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/typingFrenzy.js"]();
/******/ 	
/******/ })()
;